export declare const adminPurchaseListingAndSend = "import FungibleToken from 0xstd/FungibleToken\nimport NonFungibleToken from 0xstd/NonFungibleToken\n\nimport Elvn from 0xsprt/Elvn\nimport Moments from 0xsprt/Moments\nimport SprtNFTStorefront from 0xsprt/SprtNFTStorefront\n\ntransaction(listingResourceID: UInt64, storefrontAddress: Address, target: Address) {\n    let tokenAdmin: &Elvn.Administrator\n\n    let momentsCollection: &Moments.Collection{Moments.MomentsCollectionPublic}\n    let storefront: &SprtNFTStorefront.Storefront{SprtNFTStorefront.StorefrontPublic}\n    let listing: &SprtNFTStorefront.Listing{SprtNFTStorefront.ListingPublic}\n\n    prepare(account: AuthAccount) {\n\t\tself.tokenAdmin = account\n \t       .borrow<&Elvn.Administrator>(from: /storage/elvnAdmin)\n \t       ?? panic(\"Signer is not the token admin\")\n\n        self.storefront = getAccount(storefrontAddress)\n            .getCapability<&SprtNFTStorefront.Storefront{SprtNFTStorefront.StorefrontPublic}>(\n                SprtNFTStorefront.StorefrontPublicPath\n            )\n            .borrow()\n            ?? panic(\"Could not borrow Storefront from provided address\")\n\n        self.listing = self.storefront.borrowListing(listingResourceID: listingResourceID)\n            ?? panic(\"No Listing with that ID in Storefront\")\n        \n        let target = getAccount(target)\n        self.momentsCollection = target.getCapability(Moments.CollectionPublicPath)\n            .borrow<&Moments.Collection{Moments.MomentsCollectionPublic}>()\n            ?? panic(\"Cannot borrow Moments collection from target account storage\")\n    }\n\n    execute {\n        let price = self.listing.getDetails().salePrice\n        let minter <- self.tokenAdmin.createNewMinter(allowedAmount: price)\n\t\tlet vault <- minter.mintTokens(amount: price)\n\n        let item <- self.listing.purchase(\n            payment: <-vault\n        )\n\n        self.momentsCollection.deposit(token: <-item)\n\n        self.storefront.cleanup(listingResourceID: listingResourceID)\n\n        destroy minter\n    }\n}\n";
