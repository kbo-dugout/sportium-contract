export declare const depositElvn = "import FungibleToken from 0xFungibleToken\nimport Elvn from 0xElvn\nimport ElvnPackPurchaseTreasury from 0xElvnPackPurchaseTreasury\n\npub fun setupAccount(account: AuthAccount) {\n    if account.borrow<&Elvn.Vault>(from: /storage/elvnVault) == nil {\n        // Create a new Elvn Vault and put it in storage\n        account.save(<-Elvn.createEmptyVault(), to: /storage/elvnVault)\n\n        // Create a public capability to the stored Vault that only exposes\n        // the deposit method through the Receiver interface\n        //\n        account.link<&Elvn.Vault{FungibleToken.Receiver}>(\n            /public/elvnReceiver,\n            target: /storage/elvnVault\n        )\n\n        // Create a public capability to the stored Vault that only exposes\n        // the balance field through the Balance interface\n        //\n        account.link<&Elvn.Vault{FungibleToken.Balance}>(\n            /public/elvnBalance,\n            target: /storage/elvnVault\n        )\n    }\n}\n\ntransaction(amount: UFix64) {\n  // The Vault resource that holds the tokens that are being transfered\n  let depositVault: @FungibleToken.Vault\n\n  prepare(account: AuthAccount) {\n      setupAccount(account: account)\n        // Get a reference to the account's stored vault\n        let vaultRef = account.borrow<&Elvn.Vault>(from: /storage/elvnVault)\n            ?? panic(\"Could not borrow reference to the owner's Vault!\")\n\n        // Withdraw tokens from the account's stored vault\n        self.depositVault <- vaultRef.withdraw(amount: amount)\n    }\n\n    execute {\n        ElvnPackPurchaseTreasury.depositElvn(vault: <- self.depositVault)\n    }\n}\n";
