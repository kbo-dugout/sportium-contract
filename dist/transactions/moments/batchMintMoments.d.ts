export declare const batchMintMoments = "import NonFungibleToken from 0xNonFungibleToken\nimport Moments from 0xMoments\n\n// This transction uses the NFTMinter resource to mint a new NFT.\n//\n// It must be run with the account that has the minter resource\n// stored at path /storage/NFTMinter.\n\ntransaction(recipient: Address, metadataList: [{String: String}]) {\n\n    // local variable for storing the minter reference\n    let minter: &Moments.NFTMinter\n\n    prepare(signer: AuthAccount) {\n\n        // borrow a reference to the NFTMinter resource in storage\n        self.minter = signer.borrow<&Moments.NFTMinter>(from: Moments.MinterStoragePath)\n            ?? panic(\"Could not borrow a reference to the NFT minter\")\n    }\n\n    execute {\n        // get the public account object for the recipient\n        let recipient = getAccount(recipient)\n\n        // borrow the recipient's public NFT collection reference\n        let receiver = recipient\n            .getCapability(Moments.CollectionPublicPath)!\n            .borrow<&{NonFungibleToken.CollectionPublic}>()\n            ?? panic(\"Could not get receiver reference to the NFT Collection\")\n\n        for metadata in metadataList {\n            // mint the NFT and deposit it to the recipient's collection\n            self.minter.mintNFT(recipient: receiver, metadata: metadata)\n        }\n    }\n}\n ";
