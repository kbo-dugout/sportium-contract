export declare const transferMoment = "import NonFungibleToken from 0xNonFungibleToken\nimport Moments from 0xMoments\n\n// This transaction transfers a Moment from one account to another.\n\npub fun setupAccount(account: AuthAccount) {\n    // if the account doesn't already have a collection\n    if account.borrow<&Moments.Collection>(from: Moments.CollectionStoragePath) == nil {\n\n        // create a new empty collection\n        let collection <- Moments.createEmptyCollection()\n        \n        // save it to the account\n        account.save(<-collection, to: Moments.CollectionStoragePath)\n\n        // create a public capability for the collection\n        account.link<&Moments.Collection{NonFungibleToken.CollectionPublic, Moments.MomentsCollectionPublic}>(Moments.CollectionPublicPath, target: Moments.CollectionStoragePath)\n    }\n}\n\ntransaction(recipient: Address, withdrawID: UInt64) {\n    prepare(account: AuthAccount) {\n        setupAccount(account: account)\n        \n        // get the recipients public account object\n        let recipient = getAccount(recipient)\n\n        // borrow a reference to the signer's NFT collection\n        let collectionRef = account.borrow<&Moments.Collection>(from: Moments.CollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to the owner's collection\")\n\n        // borrow a public reference to the receivers collection\n        let depositRef = recipient.getCapability(Moments.CollectionPublicPath)!.borrow<&{NonFungibleToken.CollectionPublic}>()!\n\n        // withdraw the NFT from the owner's collection\n        let nft <- collectionRef.withdraw(withdrawID: withdrawID)\n\n        // Deposit the NFT in the recipient's collection\n        depositRef.deposit(token: <-nft)\n    }\n}\n";
