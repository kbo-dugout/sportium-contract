export declare const buyPack = "import FungibleToken from 0xFungibleToken\n\nimport Pack from 0xPack\nimport Elvn from 0xElvn\n\ntransaction(releaseId: UInt64) {\n\tlet collection: &Pack.Collection\n\n\tlet vault: @Elvn.Vault\n\n    prepare(account: AuthAccount) {\n\t    let vaultRef = account.borrow<&Elvn.Vault>(from: /storage/elvnVault) \n\t\t\t?? panic(\"Could not borrow reference to the owner's Vault!\")\n\t\t\n\t\tlet packPrice = Pack.getPackPrice(releaseId: releaseId)\n\t\tself.vault <- vaultRef.withdraw(amount: packPrice) as! @Elvn.Vault\n\n\t\tself.collection = account.borrow<&Pack.Collection>(from: Pack.CollectionStoragePath) \n\t\t\t?? panic(\"Colud not borrow reference to the owner's Collection!\")\n    }\n\n\texecute {\n\t\tself.collection\n\t\t\t.deposit(\n\t\t\t\ttoken: <- Pack.buyPack(releaseId: releaseId, vault: <- self.vault)\n\t\t\t)\n\t}\n}\n";
