export declare const adminBuyPackAndSend = "import FungibleToken from 0xFungibleToken\n\nimport Pack from 0xPack\nimport Elvn from 0xElvn\n\ntransaction(releaseId: UInt64, target: Address) {\n    let tokenAdmin: &Elvn.Administrator\n\n\tlet collection: &Pack.Collection{Pack.PackCollectionPublic}\n\n    prepare(account: AuthAccount) {\n\t\tself.tokenAdmin = account\n \t       .borrow<&Elvn.Administrator>(from: /storage/elvnAdmin)\n \t       ?? panic(\"Signer is not the token admin\")\n\n\t\tlet target = getAccount(target)\n\t\tself.collection = target.getCapability(Pack.CollectionPublicPath)\n\t\t\t.borrow<&Pack.Collection{Pack.PackCollectionPublic}>()\n\t\t\t?? panic(\"Colud not borrow reference to the owner's Collection!\")\n    }\n\n\texecute {\n\t\tlet packPrice = Pack.getPackPrice(releaseId: releaseId)\n\n\t\tlet minter <- self.tokenAdmin.createNewMinter(allowedAmount: packPrice)\n\t\tlet vault <- minter.mintTokens(amount: packPrice)\n\n\t\tself.collection\n\t\t\t.deposit(\n\t\t\t\ttoken: <- Pack.buyPack(releaseId: releaseId, vault: <- vault)\n\t\t\t)\n\n        destroy minter\n\t}\n}\n";
