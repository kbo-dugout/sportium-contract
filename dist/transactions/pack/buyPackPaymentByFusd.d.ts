export declare const buyPackPaymentByFusd = "import FungibleToken from 0xstd/FungibleToken\nimport FUSD from 0xstd/FUSD\n\nimport Elvn from 0xsprt/Elvn\nimport ElvnFUSDTreasury from 0xsprt/ElvnFUSDTreasury\nimport Pack from 0xsprt/Pack\n\npub fun swapFUSDToElvn(account: AuthAccount, amount: UFix64): @FungibleToken.Vault {\n    let vaultRef = account.borrow<&FUSD.Vault>(from: /storage/fusdVault) \n        ?? panic(\"Could not borrow reference to the owner's Vault!\")\n    let fusdVault <- vaultRef.withdraw(amount: amount) as! @FUSD.Vault\n\n    return <- ElvnFUSDTreasury.swapFUSDToElvn(vault: <- fusdVault)\n}\n\ntransaction(releaseId: UInt64) {\n    let collection: &Pack.Collection\n\n\tlet vault: @Elvn.Vault\n\n    prepare(account: AuthAccount) {\n        let price = Pack.getPackPrice(releaseId: releaseId)\n\n        self.vault <- swapFUSDToElvn(account: account, amount: price) as! @Elvn.Vault\n\t\tself.collection = account.borrow<&Pack.Collection>(from: Pack.CollectionStoragePath) \n\t\t\t?? panic(\"Colud not borrow reference to the owner's Collection!\")\n    }\n\n    execute {\n\t\tself.collection\n\t\t\t.deposit(\n\t\t\t\ttoken: <- Pack.buyPack(releaseId: releaseId, vault: <- self.vault)\n\t\t\t)\n    }\n}\n";
