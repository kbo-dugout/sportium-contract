export declare const buyPackPaymentByFlow = "import FungibleToken from 0xFungibleToken\nimport FlowToken from 0xFlowToken\nimport FUSD from 0xFUSD\n\nimport FlowSwapPair from 0xFlowSwapPair\nimport FusdUsdtSwapPair from 0xFusdUsdtSwapPair\n\nimport Elvn from 0xElvn\nimport ElvnFUSDTreasury from 0xElvnFUSDTreasury\nimport Pack from 0xPack\n\n// blocto swap route: fusd <-> tusdt <-> flow\npub fun getFUSDToFlowPrice(amount: UFix64): UFix64 {\n\tlet quote0 = FusdUsdtSwapPair.quoteSwapExactToken1ForToken2(amount: amount * (1.0 - FusdUsdtSwapPair.getFeePercentage()))\n  \tlet quote = FlowSwapPair.quoteSwapExactToken2ForToken1(amount: quote0 * (1.0 - FlowSwapPair.getFeePercentage()))\n  \tlet poolAmounts0 = FlowSwapPair.getPoolAmounts()\n\tlet currentPrice = (poolAmounts0.token1Amount / poolAmounts0.token2Amount) * (1.0 - FlowSwapPair.getFeePercentage())\n\n\treturn currentPrice\n}\n\ntransaction(releaseId: UInt64) {\n    let collection: &Pack.Collection\n\n    prepare(account: AuthAccount) {\n\t\tself.collection = account.borrow<&Pack.Collection>(from: Pack.CollectionStoragePath) \n\t\t\t?? panic(\"Colud not borrow reference to the owner's Pack Collection!\");\n\n\t\tlet flowTokenVault = account.borrow<&FlowToken.Vault>(from: /storage/flowTokenVault) \n        \t?? panic(\"Could not borrow reference to the owner's Flow Vault!\");\n        \n        let elvnPrice = Pack.getPackPrice(releaseId: releaseId);\n        \n        let threshold = 1.01;\n        let flowAmount = getFUSDToFlowPrice(amount: elvnPrice) * threshold;\n        \n        let flowVault <- flowTokenVault.withdraw(amount: flowAmount) as! @FlowToken.Vault;\n        let tUSDTVault <- FlowSwapPair.swapToken1ForToken2(from: <- flowVault);\n        let fusdVault <- FusdUsdtSwapPair.swapToken2ForToken1(from: <- tUSDTVault);\n\n\t\tlet elvnVault <- ElvnFUSDTreasury.swapFUSDToElvn(vault: <- fusdVault) as! @Elvn.Vault\n\t\tlet paymentVault <- elvnVault.withdraw(amount: elvnPrice) as! @Elvn.Vault\n\n\t\tself.collection\n\t\t\t.deposit(\n\t\t\t\ttoken: <- Pack.buyPack(releaseId: releaseId, vault: <- paymentVault)\n\t\t\t)\n\n\t\tif elvnVault.balance > 0.0 {\n\t\t\tlet fusdVault <- ElvnFUSDTreasury.swapElvnToFUSD(vault: <- elvnVault) as! @FUSD.Vault\n\t\t\tlet tUSDTVault <- FusdUsdtSwapPair.swapToken1ForToken2(from: <-fusdVault)\n\t\t\tlet flowVault <- FlowSwapPair.swapToken2ForToken1(from: <- tUSDTVault)\n\t\t\t\n\t\t\tflowTokenVault.deposit(from: <- flowVault)\n\t\t} else {\n\t\t\tdestroy elvnVault\n\t\t}\n    }\n\n    execute {\n    }\n}\n";
