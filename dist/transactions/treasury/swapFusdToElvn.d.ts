export declare const swapFusdToElvn = "import FungibleToken from 0xFungibleToken\nimport Elvn from 0xElvn\nimport FUSD from 0xFUSD\nimport ElvnFUSDTreasury from 0xElvnFUSDTreasury\n\npub fun setupAccount(account: AuthAccount) {\n    if account.borrow<&Elvn.Vault>(from: /storage/elvnVault) == nil {\n        // Create a new Elvn Vault and put it in storage\n        account.save(<-Elvn.createEmptyVault(), to: /storage/elvnVault)\n\n        // Create a public capability to the stored Vault that only exposes\n        // the deposit method through the Receiver interface\n        //\n        account.link<&Elvn.Vault{FungibleToken.Receiver}>(\n            /public/elvnReceiver,\n            target: /storage/elvnVault\n        )\n\n        // Create a public capability to the stored Vault that only exposes\n        // the balance field through the Balance interface\n        //\n        account.link<&Elvn.Vault{FungibleToken.Balance}>(\n            /public/elvnBalance,\n            target: /storage/elvnVault\n        )\n    }\n\n    if account.borrow<&FUSD.Vault>(from: /storage/fusdVault) == nil {\n        account.save(<-FUSD.createEmptyVault(), to: /storage/fusdVault)\n\n        account.link<&FUSD.Vault{FungibleToken.Receiver}>(\n            /public/fusdReceiver,\n            target: /storage/fusdVault\n        )\n\n        account.link<&FUSD.Vault{FungibleToken.Balance}>(\n            /public/fusdBalance,\n            target: /storage/fusdVault\n        )\n    }\n}\n\ntransaction(amount: UFix64) {\n    let elvnReceiver: &{FungibleToken.Receiver}\n    let fusdVault: @FungibleToken.Vault\n\n    prepare(account: AuthAccount) {\n        setupAccount(account: account)\n\n        self.elvnReceiver =account \n            .getCapability(/public/elvnReceiver)\n            .borrow<&{FungibleToken.Receiver}>()\n            ?? panic(\"Unable to borrow receiver reference\")\n\n        let vaultRef = account.borrow<&FUSD.Vault>(from: /storage/fusdVault) \n            ?? panic(\"Could not borrow reference to the owner's Vault!\")\n        self.fusdVault <- vaultRef.withdraw(amount: amount)\n    }\n\n    execute {\n        let fusdVault <- self.fusdVault as! @FUSD.Vault\n        let elvnVault <- ElvnFUSDTreasury.swapFUSDToElvn(vault: <- fusdVault)\n\n        self.elvnReceiver.deposit(from: <- elvnVault)\n    }\n}\n";
