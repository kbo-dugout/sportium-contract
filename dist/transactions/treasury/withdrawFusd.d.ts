export declare const withdrawFusd = "import FungibleToken from 0xstd/FungibleToken\n\nimport ElvnFUSDTreasury from 0xsprt/ElvnFUSDTreasury\n\ntransaction(recipient: Address, amount: UFix64) {\n    let treasuryAdmin: &ElvnFUSDTreasury.FUSDAdministrator\n    let tokenReceiver: &{FungibleToken.Receiver}\n\n    prepare(signer: AuthAccount) {\n        self.treasuryAdmin = signer\n            .borrow<&ElvnFUSDTreasury.FUSDAdministrator>(from: /storage/treasuryFUSDAdmin)\n            ?? panic(\"Signer is not the token admin\")\n\n        self.tokenReceiver = getAccount(recipient)\n            .getCapability(/public/fusdReceiver)\n            .borrow<&{FungibleToken.Receiver}>()\n            ?? panic(\"Unable to borrow receiver reference\")\n    }\n\n    execute {\n        self.tokenReceiver.deposit(from: <- self.treasuryAdmin.withdraw(amount: amount))\n    }\n}\n";
