export declare const mintTokens = "import FungibleToken from 0xFungibleToken\nimport FUSD from 0xFUSD\n\ntransaction(recipient: Address, amount: UFix64) {\n    let tokenAdmin: &FUSD.Administrator\n    let tokenReceiver: &{FungibleToken.Receiver}\n\n    prepare(signer: AuthAccount) {\n        self.tokenAdmin = signer\n            .borrow<&FUSD.Administrator>(from: FUSD.AdminStoragePath)\n            ?? panic(\"Signer is not the token admin\")\n\n        self.tokenReceiver = getAccount(recipient)\n            .getCapability(/public/fusdReceiver)\n            .borrow<&{FungibleToken.Receiver}>()\n            ?? panic(\"Unable to borrow receiver reference\")\n    }\n\n    execute {\n        let minter <- self.tokenAdmin.createNewMinter()\n        let mintedVault <- minter.mintTokens(amount: amount)\n\n        self.tokenReceiver.deposit(from: <-mintedVault)\n\n        destroy minter\n    }\n}\n";
